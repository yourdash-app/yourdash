/*
 * Copyright Â©2025 Ewsgit<https://github.com/ewsgit> and YourDash<https://github.com/yourdash> contributors.
 * YourDash is licensed under the MIT License. (https://ewsgit.mit-license.org)
 */

import { TokenType } from "../../token/token";
import CodeStudioLanguage from "../language";
// @ts-ignore
import TYPESCRIPT_TREESITTER_LANGUAGE from "./typescript.wasm?url";

export default class CodeStudioLanguageJavascript extends CodeStudioLanguage {
  constructor() {
    super(TYPESCRIPT_TREESITTER_LANGUAGE);

    this.tokens = {
      "{": TokenType.PUNCTUATION,
      "}": TokenType.PUNCTUATION,
      '"': TokenType.STRING,
      "'": TokenType.STRING,
      "`": TokenType.STRING,
      comment: TokenType.COMMENT,
      string_fragment: TokenType.STRING,
      import: TokenType.KEYWORD,
      identifier: TokenType.VARIABLE,
      from: TokenType.KEYWORD,
      ";": TokenType.OPERATOR,
      ":": TokenType.OPERATOR,
      "=": TokenType.OPERATOR,
      "+": TokenType.OPERATOR,
      "-": TokenType.OPERATOR,
      "*": TokenType.OPERATOR,
      "/": TokenType.OPERATOR,
      "%": TokenType.OPERATOR,
      "^": TokenType.OPERATOR,
      "&": TokenType.OPERATOR,
      "|": TokenType.OPERATOR,
      "<": TokenType.OPERATOR,
      ">": TokenType.OPERATOR,
      "!": TokenType.OPERATOR,
      "?": TokenType.OPERATOR,
      "&&": TokenType.OPERATOR,
      "||": TokenType.OPERATOR,
      "==": TokenType.OPERATOR,
      "===": TokenType.OPERATOR,
      "!=": TokenType.OPERATOR,
      "!==": TokenType.OPERATOR,
      "<=": TokenType.OPERATOR,
      ">=": TokenType.OPERATOR,
      "<<": TokenType.OPERATOR,
      ">>": TokenType.OPERATOR,
      ">>>": TokenType.OPERATOR,
      "+=": TokenType.OPERATOR,
      "-=": TokenType.OPERATOR,
      "*=": TokenType.OPERATOR,
      "/=": TokenType.OPERATOR,
      "%=": TokenType.OPERATOR,
      "^=": TokenType.OPERATOR,
      module: TokenType.KEYWORD,
      export: TokenType.KEYWORD,
      interface: TokenType.KEYWORD,
      class: TokenType.KEYWORD,
      enum: TokenType.KEYWORD,
      type: TokenType.KEYWORD,
      function: TokenType.KEYWORD,
      const: TokenType.KEYWORD,
      abstract: TokenType.KEYWORD,
      private: TokenType.KEYWORD,
      public: TokenType.KEYWORD,
      protected: TokenType.KEYWORD,
      static: TokenType.KEYWORD,
      extends: TokenType.KEYWORD,
      implements: TokenType.KEYWORD,
      new: TokenType.KEYWORD,
      delete: TokenType.KEYWORD,
      await: TokenType.KEYWORD,
      void: TokenType.TYPE,
      null: TokenType.TYPE,
      undefined: TokenType.TYPE,
      true: TokenType.KEYWORD,
      false: TokenType.KEYWORD,
      this: TokenType.KEYWORD,
      if: TokenType.KEYWORD,
      else: TokenType.KEYWORD,
      while: TokenType.KEYWORD,
      for: TokenType.KEYWORD,
      in: TokenType.KEYWORD,
      do: TokenType.KEYWORD,
      break: TokenType.KEYWORD,
      continue: TokenType.KEYWORD,
      return: TokenType.KEYWORD,
      switch: TokenType.KEYWORD,
      case: TokenType.KEYWORD,
      default: TokenType.KEYWORD,
      throw: TokenType.KEYWORD,
      try: TokenType.KEYWORD,
      catch: TokenType.KEYWORD,
      finally: TokenType.KEYWORD,
      debugger: TokenType.KEYWORD,
      with: TokenType.KEYWORD,
      as: TokenType.KEYWORD,
      instanceof: TokenType.KEYWORD,
      type_identifier: TokenType.TYPE,
      property_identifier: TokenType.VARIABLE,
      "(": TokenType.PUNCTUATION,
      ")": TokenType.PUNCTUATION,
      "[": TokenType.PUNCTUATION,
      "]": TokenType.PUNCTUATION,
      ",": TokenType.PUNCTUATION,
      shorthand_property_identifier: TokenType.VARIABLE,
      shorthand_property_identifier_pattern: TokenType.VARIABLE,
      string: TokenType.STRING,
      number: TokenType.NUMBER,
      ".": TokenType.PUNCTUATION,
      "=>": TokenType.KEYWORD,
      "${": TokenType.OPERATOR,
      regex_pattern: TokenType.STRING,
      regex_flags: TokenType.STRING,
      yield: TokenType.KEYWORD,
      "++": TokenType.OPERATOR,
      "--": TokenType.OPERATOR,
      "...": TokenType.OPERATOR,
      var: TokenType.KEYWORD,
      let: TokenType.KEYWORD,
      async: TokenType.KEYWORD,
    };

    return this;
  }
}
